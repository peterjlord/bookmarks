<?php
/**
 * Implements hook_entity_info().
 */
function bookmarks_entity_info() {

  $info = array();

  $info['bookmarks'] = array(
    'label' => t('Bookmark'),
    'base table' => 'bookmarks',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),

    'fieldable' => TRUE,
    'bundles' => array(
      'bookmarks' => array(
        'label' => t('Bookmarks'),
        'admin' => array(
          'path' => 'admin/bookmarks',
        ),
       ),
     ),
    'access callback' => 'bookmarks_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
        'path' => 'admin/bookmarks',
          'controller class' => 'EntityDefaultUIController',
    ),
    'module' => 'bookmarks',
    'entity class' => 'BookmarkEntity', 
    'controller class' => 'BookmarkEntityController',
  );

  return $info;
}

/**
  *  * Access callback for bookmark entities.
  *   */
function bookmarks_access_callback($op, $project = NULL, $account = NULL) {
  if ($op == 'view' || $op == 'update' || $op == 'create' || $op == 'delete') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Implements hook_menu()
 */
function bookmarks_menu() {
  $items = array();

  $items['bookmarks'] = array(
    'title' => 'Bookmarks',
    'page callback' => 'bookmarks_view_bookmarks',
    'access arguments' => array('access content'),
  );
  $items['bookmark/%'] = array(
    'title' => 'Bookmark',
    'page callback' => 'bookmarks_view_bookmark',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

function bookmarks_view_bookmarks() {
  $bookmarks = entity_load('bookmarks', array(1, 2, 3));
  $list = entity_view('bookmarks', $bookmarks);
  dsm($list);
  $output = array();

  foreach ($list['bookmarks'] as $bookmark) {
    $output[] = drupal_render($bookmark);
  }

  return implode($output);
}
function bookmarks_view_bookmark($id) {
  $bookmarks = entity_load('bookmarks', array($id));
  $bookmark = $bookmarks[$id];
  drupal_set_title($bookmark->bookmark);
  $output = entity_view('bookmarks', array($bookmark));

  return $output;
}

/**
  *  * Form definition for adding / editing a bookmark.
  *   */
function bookmarks_form($form, &$form_state, $bookmark = NULL) {

  $form['bookmark'] = array(
    '#title' => t('Bookmark'),
    '#type' => 'textfield',
    '#default_value' => isset($bookmark->bookmark) ? $bookmark->bookmark : '',
    '#required' => TRUE,
  );
  $form['url'] = array(
    '#title' => t('URL'),
    '#type' => 'textfield',
    '#default_value' => isset($bookmark->url) ? $bookmark->url: '',
    '#required' => TRUE,
  );
  $form['added'] = array(
    '#title' => t('Date Added'),
    //'#type' => 'textfield',
    '#type' => 'textfield',
    '#default_value' => isset($bookmark->added) ? check_plain($bookmark->added) : '',
    '#required' => FALSE,
   );

  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($project->id) ? t('Update bookmark') : t('Save bookmark'),
    '#weight' => 50,
   );

  return $form;
}

/**
  *  * Submit handler for the project add/edit form.
  *   */
function bookmarks_form_submit($form, &$form_state) {
  $bookmark = entity_ui_form_submit_build_entity($form, $form_state);
  $bookmark->save();
  drupal_set_message(t('The bookmark: @bookmark has been saved.', array('@bookmark' => $bookmark->bookmark)));
  $form_state['redirect'] = 'admin/bookmarks';
}
/**
 * Extending the EntityAPIController for the Project entity.
 */
class BookmarkEntityController extends EntityAPIController {
  function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    // Our additions to the $build render array.
    $build['bookmark'] = array(
      '#type' => 'markup',
      '#markup' => check_plain($entity->bookmark),
      '#prefix' => '<div class="bookmark-bookmark">',
      '#suffix' => '</div>',
    );
    $build['url'] = array(
      '#type' => 'markup',
      '#markup' => check_plain($entity->url),
      '#prefix' => '<div class="bookmark-url">',
      '#suffix' => '</div>',
    );
    $build['added'] = array(
      '#type' => 'markup',
      '#markup' => date('d F, Y', check_plain($entity->added)),
      '#prefix' => '<p>Date Added: ',
      '#suffix' => '</p>',
    );
    return $build;
  }
}

/**
 *  * Project entity class extending the Entity class
 *   */
class BookmarkEntity extends Entity {
  /**
  *    * Change the default URI from default/id to project/id
  *       */
  protected function defaultUri() {
    return array('path' => 'bookmark/' . $this->identifier());
  }
}
